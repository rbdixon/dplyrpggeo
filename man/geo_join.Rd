% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/dplyr_geo_join.R
\name{geo_join}
\alias{full_geo_join}
\alias{geo_join}
\alias{inner_geo_join}
\alias{left_geo_join}
\alias{right_geo_join}
\alias{semi_geo_join}
\title{Join two tbls together geometrically based on proximity.}
\usage{
inner_geo_join(x, y, by = NULL, within = 0, ...)

left_geo_join(x, y, by = NULL, within = 0, ...)

right_geo_join(x, y, by = NULL, within = 0, ...)

full_geo_join(x, y, by = NULL, within = 0, ...)

semi_geo_join(x, y, by = NULL, within = 0, ...)
}
\arguments{
\item{x}{tbls to join}

\item{y}{tbls to join}

\item{by}{a character vector of variables to join by.  If \code{NULL}, the
  default, \code{join} will do a natural join, using all variables with
  common names across the two tables. A message lists the variables so
  that you can check they're right.

  To join by different variables on x and y use a named vector.
  For example, \code{by = c("a" = "b")} will match \code{x.a} to
  \code{y.b}.}

\item{within}{join geometries of \code{x} and \code{y} if the geometries are within the
specified \code{within} meters of one another. If \code{distance==0} then geometries must intersect
to be joined.}

\item{...}{other parameters passed onto methods}
}
\description{
These generic functions are only supported on PostgreSQL with the PostGIS extensions for
working with geospatial data.
}
\seealso{
\code{\link[dplyr]{inner_join}} for details on dplyr join functions. These PostGIS
functions are used: \href{http://postgis.net/docs/ST_DWithin.html}{ST_DWithin()} for proximity
joins when \code{within!=0} and \href{http://postgis.net/docs/ST_Contains.html}{ST_Contains()} for
intersection when \code{within==0}.
}

